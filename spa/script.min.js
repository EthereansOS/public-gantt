"use strict";function _typeof(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(t){return typeof t}:_typeof=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(e)}function _asyncToGenerator(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){function o(e,t){try{var n=s[e](t),o=n.value}catch(f){i(f);return}n.done?r(o):Promise.resolve(o).then(u,a)}function u(e){o("next",e)}function a(e){o("throw",e)}var s=e.apply(t,n);u()})}}(window.preloadedScripts=window.preloadedScripts||[]).push(...['spa/ganttViewer/controller.js','spa/ganttViewer/style.min.css','spa/ganttViewer/view.jsx','spa/index/controller.js','spa/index/style.min.css','spa/index/view.jsx']);var GanttViewerController = function(view) {
    var context = this;
    context.view = view;

    var baseURL = window.location.port === '5500' ? 'http://127.0.0.1:5500' : 'https://raw.githubusercontent.com/EthereansOS/public-gantt/gh-pages';

    context.refreshGantt = async function refreshGantt(ref) {
        var data = await context.retrieveData();
        (new Gantt("ganttChart", {
            sidebarHeader: "Unused right now",
            noDataFoundMessage: "No data found",
            startTimeAlias: "start",
            endTimeAlias: "end",
            idAlias: "recordID",
            rowAlias: "row",
            linkAlias: "urls",
            tooltipAlias: "tooltip",
            refreshFunction: () => data
        })).refreshData();
        [...ref.getElementsByTagName('a')].forEach((a, i) => {
            a.href = "#";
            a.style.backgroundColor = "#" + data[i].backgroundColor;
            if(!data[i].started) {
                a.style.opacity = 0.3;
                a.innerHTML = `<i class="fa fa-hourglass" aria-hidden="true" style="float: right; margin-top: 10px; margin-right: -5px; font-size: 15px;"></i>`
            } else if(!data[i].completed) {
                a.style.opacity = 0.5;
                a.innerHTML = `<i class="fa fa-play" aria-hidden="true" style="float: right; margin-top: 10px; margin-right: -5px; font-size: 10px;"></i>`
            } else {
                a.innerHTML = `<i class="fa fa-check" aria-hidden="true" style="float: right; margin-top: 10px; margin-right: -5px; font-size: 20px; color: darkgreen;"></i>`
            }
        });
        return data;
    };

    context.retrieveData = async function retrieveData() {

        var taskInterval = 300000;
        var taskDuration = 1800000;
        var rawDataArray = await (await fetch(`${baseURL}/data/timeline.json`)).json();

        var data = [];

        var date = (new Date().getTime()) - taskInterval;

        var globalRecordID = 1;
        var recordIDs = {};

        for(var rawData of rawDataArray) {
            var originalData = (recordIDs[rawData.codeName] = recordIDs[rawData.codeName] || {...rawData, recordID : globalRecordID++, backgroundColor : window.web3.utils.sha3(rawData.codeName).substring(10, 16)});
            data.push({
                recordID : originalData.recordID,
                row : originalData.name,
                tooltip : await context.getTooltip(rawData, originalData),
                start : new Date(date += taskInterval).toString(),
                end : new Date(date += taskDuration).toString(),
                backgroundColor : originalData.backgroundColor,
                started : rawData.started,
                completed : rawData.completed
            });
        }

        return data;
    }

    context.getTooltip = async function getTooltip(rawData, originalData) {
        var description = rawData.description;
        if(!description && (rawData.descriptionLink || originalData.descriptionLink)) {
            description = await (await fetch(baseURL + '/data/descriptions/' + (rawData.descriptionLink || originalData.descriptionLink))).text();
            description = (new showdown.Converter()).makeHtml(description);
        }

        description = `<p><b>${originalData.name}</b></p><p>${description || originalData.description || ""}</p>`;

        if(rawData.started) {
            description += `<p>Started: ${rawData.started}${rawData.completed ? ` - Completed: ${rawData.completed}` : ""}</p>`;
        }

        return description;
    }
};;var GanttViewer=React.createClass({displayName:"GanttViewer",requiredScripts:["assets/plugins/gantt/gantt.min.css","assets/plugins/gantt/gantt.min.js","assets/plugins/showdown/showdown.min.js"],render:function(){var t=this;return React.createElement("div",{id:"ganttChart",ref:function(n){return n&&n.children.length===0&&t.controller.refreshGantt(n).then(t.props.onData)}})}});var IndexController = function(view) {
    var context = this;
    context.view = view;
};;var Index=React.createClass({displayName:"Index",requiredModules:["spa/ganttViewer"],render:function(){var t=useState(this,null,"data"),n=t[0],r=t[1];return React.createElement(React.Fragment,null,React.createElement("header",{className:"w3-container w3-teal"},React.createElement("h1",null,"The Gantt")),React.createElement("div",{className:"w3-container"},React.createElement("p",null,"This page will be filled with all the info about the progress of the protocol. Don't expect to see any ETA, it's just to show progresses. It will be always updated with news and progresses that can change in time. But this is a public GitHub repo, so everyone can always check the commits, in order to see what is changed and why.")),React.createElement("div",{className:"w3-container"},React.createElement(GanttViewer,{onData:r})),React.createElement("div",{className:"w3-container"},React.createElement("h5",null,"Legend:"),React.createElement("ul",null,React.createElement("li",null,React.createElement("i",{"class":"fa fa-hourglass","aria-hidden":"true"})," ",React.createElement("span",null,"Task enqueued")),React.createElement("li",null,React.createElement("i",{"class":"fa fa-play","aria-hidden":"true"})," ",React.createElement("span",null,"Task started")),React.createElement("li",null,React.createElement("i",{"class":"fa fa-check","aria-hidden":"true"})," ",React.createElement("span",null,"Task done")))),n&&React.createElement("div",{className:"w3-container"},React.createElement("h5",null,"Tasks:"),React.createElement("ul",null,n.map(function(e,t){return React.createElement("li",{className:"task",key:e.recordID+"_"+t,ref:function(n){return n&&(n.innerHTML=e.tooltip)}})}))))}});